#ifndef CUTTING_STOCK_HEURISTIC_SOLVER_H
#define CUTTING_STOCK_HEURISTIC_SOLVER_H

#include "IntegerSolverBacktrackingMode.hpp"
#include "CuttingStockInstance.hpp"
#include "CuttingStockSolver.hpp"
#include "CuttingStockLinearRelaxationSolver.hpp"



class CuttingStockHeuristicIntegerSolverRuntimeStatistics
{
private:

    long totalExecutionTime;
    long heuristicExecutionTime;

public:

    CuttingStockHeuristicIntegerSolverRuntimeStatistics()
    {
        totalExecutionTime = 0;
        heuristicExecutionTime = 0;
    }

    // Gets the total execution time, in microseconds.
    long getTotalExecutionTime() {
        return totalExecutionTime;
    }

    // Sets the total execution time, in microseconds.
    void setTotalExecutionTime(long t) {
        totalExecutionTime = t;
    }

    // Gets the heuristic execution time, in microseconds.
    long getHeuristicExecutionTime() {
        return heuristicExecutionTime;
    }

    // Sets the heuristic execution time, in microseconds.
    void setHeuristicExecutionTime(long t) {
        heuristicExecutionTime = t;
    }
};


class CuttingStockHeuristicIntegerSolver : public CuttingStockSolver<int> {

private:

    CuttingStockLinearRelaxationSolver linearRelaxationSolver;

    CuttingStockHeuristicIntegerSolverRuntimeStatistics runtimeStatistics;

    IntegerSolverBacktrackingMode backtrackingMode;

    bool investigateAllPatterns;

    CuttingStockSolution<int>* solveHeuristic(CuttingStockInstance* instance,
        CuttingStockSolution<double>* linearRelaxationSolution);

public:

    CuttingStockHeuristicIntegerSolver() :
        linearRelaxationSolver(),
        backtrackingMode(BEST_LOCAL_BOUND),
        investigateAllPatterns(true)
    { }

    CuttingStockHeuristicIntegerSolver(double precision) :
        linearRelaxationSolver(precision),
        backtrackingMode(BEST_LOCAL_BOUND),
        investigateAllPatterns(true)
    { }


    CuttingStockSolution<int>* solve(CuttingStockInstance* instance);

    CuttingStockSolution<int>* solve(CuttingStockInstance* instance,
        CuttingStockSolution<double>* linearRelaxationSolution);

    // True to investigate all patterns generated by the linear realxation solution (default);
    // False to investigate only the patterns that has non-zero allocation by the linear
    // relaxation solution.
    void setInvestigateAllPatterns(bool v) {
        investigateAllPatterns = v;
    }

    bool getInvestigateAllPatterns() {
        return investigateAllPatterns;
    }

    // Sets the branch-and-cut backtracking mode used by the solver.
    void setBacktrackingMode(IntegerSolverBacktrackingMode backtrackingMode) {
        this->backtrackingMode = backtrackingMode;
    }

    IntegerSolverBacktrackingMode getBacktrackingMode() {
        return backtrackingMode;
    }

    // Gets runtime statistics
    CuttingStockHeuristicIntegerSolverRuntimeStatistics& getRuntimeStatistics() {
        return runtimeStatistics;
    }
};

#endif
